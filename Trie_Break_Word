class Solution {

    static Node root = new Node();

    static class Node{
        Node[] children;
        boolean eow;

        public Node(){
            children = new Node[26];
            for(int i=0;i<26;i++){
                children[i] = null;
            }
            eow = false;
        }
    }

    public static void Insert(String word){
        Node node = root;
        for(int i=0;i<word.length();i++){
            int index = word.charAt(i)-'a';
            if(node.children[index]==null){
                node.children[index] = new Node();
            }

            if(i==word.length()-1){
                node.children[index].eow = true;
            }

            node = node.children[index];
        }
    }

    public static boolean Search(String word){
        Node node = root;
        for(int i=0;i<word.length();i++){
            int index = word.charAt(i)-'a';
            if(node.children[index]==null){
                return false;
            }

            if(i==word.length()-1 && node.children[index].eow==false){
                return false;
            }

            node = node.children[index];
        }
        return true;
    }

    public boolean wordBreak(String s, List<String> wordDict) {

        for(int i=0;i<wordDict.size();i++){
            Solution.Insert(wordDict.get(i));
        }

        return Solution.breakWord(s);
    }

    public static boolean breakWord(String s){
        if(s.length()==0)
        {
            return true;
        }

        for(int i=1;i<=s.length();i++){
            String firstPart = s.substring(0,i);
            String secondPart = s.substring(i);
            if(Solution.Search(firstPart) && breakWord(secondPart)){
                return true;
            }
        }

        return false;
    }
}
